var documenterSearchIndex = {"docs":
[{"location":"#QuadraticSweep.jl-Documentation","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"QuadraticSweep.jl Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"QuadraticSweep.jl is a Julia package that provides efficient algorithms for selecting a subset of data points in 2D that maximizes various statistical criteria such as the coefficient of determination (R^2), correlation coefficient, total variation, and more. The package leverages combinatorial geometry and optimization techniques to find these subsets.","category":"page"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"The package implements two key algorithms:","category":"page"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"Sweep Algorithm: Efficient topological sweep that projects data into higher dimensions to identify optimal subsets.\nBrute Force Algorithm: Exhaustive search through all possible subsets.","category":"page"},{"location":"#Installation","page":"QuadraticSweep.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"To install QuadraticSweep.jl, you can use Julia's package manager. This package is not yet registered in the General registry, so you'll need to install it directly from the GitHub repository:","category":"page"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"using Pkg\nPkg.add(url=\"https://github.com/username/QuadraticSweep.jl\")","category":"page"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"Ensure that you have Julia installed on your system. If not, download and install it from https://julialang.org/downloads/.","category":"page"},{"location":"#Usage","page":"QuadraticSweep.jl Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"Once installed, you can start using the QuadraticSweep module. Below is an example of how to use the sweep and brute_force functions to find the best subset of points maximizing a given score:","category":"page"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"using QuadraticSweep\n\n# Sample data\nx = [1.0, 2.0, 3.0, 4.0]\ny = [2.0, 3.0, 6.0, 8.0]\n\n# Finding the best subset using the R^2 score\nk = 2\nscore = :r2\nbest_idxs, best_score = sweep(x, y; k=k, score=score)\n\nprintln(\"Best subset indices: \", best_idxs)\nprintln(\"Best score: \", best_score)","category":"page"},{"location":"#Supported-score-functions","page":"QuadraticSweep.jl Documentation","title":"Supported score functions","text":"","category":"section"},{"location":"","page":"QuadraticSweep.jl Documentation","title":"QuadraticSweep.jl Documentation","text":"QuadraticSweep supports several score functions, and you can specify the score function to maximize by passing the appropriate symbol to the sweep function: | Name                            | Symbol | Score Equation                                                                                                       | Maximizing | Embedding Equation                       | |––––––––––––––––-|––––|–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––|––––––|–––––––––––––––––––––| | Coefficient of Determination    | :r2  | R^2 = fracleft( S_XY - frac1n S_X S_Y right)^2left( S_XX - frac1n S_X^2 right) left( S_YY - frac1n S_Y^2 right) | True       | mathcal L(x y) = left( x^2 xy y^2 x y right) | | Correlation Coefficient         | :cor | r = fracS_XY - frac1n S_X S_Ysqrtleft( S_XX - frac1n S_X^2 right) left( S_YY - frac1n S_Y^2 right) | True       | mathcal L(x y) = left( x^2 xy y^2 x y right) | | Total Variation                 | :tv  | TV = left( S_XX - frac1k S_X^2 right) + left( S_YY - frac1k S_Y^2 right)                         | False      | mathcal L(x y) = left( x^2 y^2 x y right)     | | Covariance                      | :cov | textcov(X Y) = S_XY - frac1k S_X S_Y                                                                    | True       | mathcal L(x y) = left( x y xy right)           | | Difference of Variances         | :dv  | DV = left( S_XX - frac1k S_X^2 right) - left( S_YY - frac1k S_Y^2 right)                         | True       | mathcal L(x y) = left( x^2 y^2 x y right)     | | Fraction of Variance Unexplained| :fvu | FVU = fracS_YYleft( S_XX - frac1k S_X^2 right)                                                     | False      | mathcal L(x y) = left( x x^2 y^2 right)        |","category":"page"}]
}
